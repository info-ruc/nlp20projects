Asynchronous Methods for Deep Reinforcement Learning

Volodymyr Mnih1
Adrià Puigdomènech Badia1
Mehdi Mirza1,2
Alex Graves1
Tim Harley1
Timothy P. Lillicrap1
David Silver1
Koray Kavukcuoglu 1
1 Google DeepMind
2 Montreal Institute for Learning Algorithms (MILA), University of Montreal

VMNIH@GOOGLE.COM
ADRIAP@GOOGLE.COM
MIRZAMOM@IRO.UMONTREAL.CA
GRAVESA@GOOGLE.COM
THARLEY@GOOGLE.COM
COUNTZERO@GOOGLE.COM
DAVIDSILVER@GOOGLE.COM
KORAYK@GOOGLE.COM

Abstract
conceptually

a

simple

propose

and
We
lightweight
framework for deep reinforce-
ment learning that uses asynchronous gradient
descent for optimization of deep neural network
controllers. We present asynchronous variants of
four standard reinforcement learning algorithms
and show that parallel actor-learners have a
stabilizing effect on training allowing all four
methods to successfully train neural network
controllers. The best performing method, an
asynchronous variant of actor-critic, surpasses
the current state-of-the-art on the Atari domain
while training for half the time on a single
multi-core CPU instead of a GPU. Furthermore,
we show that asynchronous actor-critic succeeds
on a wide variety of continuous motor control
problems as well as on a new task of navigating
random 3D mazes using a visual input.

1. Introduction
Deep neural networks provide rich representations that can
enable reinforcement learning (RL) algorithms to perform
effectively. However, it was previously thought that the
combination of simple online RL algorithms with deep
neural networks was fundamentally unstable. Instead, a va-
riety of solutions have been proposed to stabilize the algo-
rithm (Riedmiller, 2005; Mnih et al., 2013; 2015; Van Has-
selt et al., 2015; Schulman et al., 2015a). These approaches
share a common idea: the sequence of observed data en-
countered by an online RL agent is non-stationary, and on-

Proceedings of the 33 rd International Conference on Machine
Learning, New York, NY, USA, 2016. JMLR: W&CP volume
48. Copyright 2016 by the author(s).

line RL updates are strongly correlated. By storing the
agent’s data in an experience replay memory, the data can
be batched (Riedmiller, 2005; Schulman et al., 2015a) or
randomly sampled (Mnih et al., 2013; 2015; Van Hasselt
et al., 2015) from different time-steps. Aggregating over
memory in this way reduces non-stationarity and decorre-
lates updates, but at the same time limits the methods to
off-policy reinforcement learning algorithms.
Deep RL algorithms based on experience replay have
achieved unprecedented success in challenging domains
such as Atari 2600. However, experience replay has several
drawbacks: it uses more memory and computation per real
interaction; and it requires off-policy learning algorithms
that can update from data generated by an older policy.
In this paper we provide a very different paradigm for deep
reinforcement learning. Instead of experience replay, we
asynchronously execute multiple agents in parallel, on mul-
tiple instances of the environment. This parallelism also
decorrelates the agents’ data into a more stationary process,
since at any given time-step the parallel agents will be ex-
periencing a variety of different states. This simple idea
enables a much larger spectrum of fundamental on-policy
RL algorithms, such as Sarsa, n-step methods, and actor-
critic methods, as well as off-policy RL algorithms such
as Q-learning, to be applied robustly and effectively using
deep neural networks.
Our parallel reinforcement learning paradigm also offers
practical beneﬁts. Whereas previous approaches to deep re-
inforcement learning rely heavily on specialized hardware
such as GPUs (Mnih et al., 2015; Van Hasselt et al., 2015;
Schaul et al., 2015) or massively distributed architectures
(Nair et al., 2015), our experiments run on a single machine
with a standard multi-core CPU. When applied to a vari-
ety of Atari 2600 domains, on many games asynchronous
reinforcement learning achieves better results, in far less

Asynchronous Methods for Deep Reinforcement Learning

time than previous GPU-based algorithms, using far less
resource than massively distributed approaches. The best
of the proposed methods, asynchronous advantage actor-
critic (A3C), also mastered a variety of continuous motor
control tasks as well as learned general strategies for ex-
ploring 3D mazes purely from visual inputs. We believe
that the success of A3C on both 2D and 3D games, discrete
and continuous action spaces, as well as its ability to train
feedforward and recurrent agents makes it the most general
and successful reinforcement learning agent to date.

2. Related Work
The General Reinforcement Learning Architecture (Gorila)
of (Nair et al., 2015) performs asynchronous training of re-
inforcement learning agents in a distributed setting. In Go-
rila, each process contains an actor that acts in its own copy
of the environment, a separate replay memory, and a learner
that samples data from the replay memory and computes
gradients of the DQN loss (Mnih et al., 2015) with respect
to the policy parameters. The gradients are asynchronously
sent to a central parameter server which updates a central
copy of the model. The updated policy parameters are sent
to the actor-learners at ﬁxed intervals. By using 100 sep-
arate actor-learner processes and 30 parameter server in-
stances, a total of 130 machines, Gorila was able to signif-
icantly outperform DQN over 49 Atari games. On many
games Gorila reached the score achieved by DQN over 20
times faster than DQN. We also note that a similar way of
parallelizing DQN was proposed by (Chavez et al., 2015).
In earlier work, (Li & Schuurmans, 2011) applied the
Map Reduce framework to parallelizing batch reinforce-
ment learning methods with linear function approximation.
Parallelism was used to speed up large matrix operations
but not to parallelize the collection of experience or sta-
bilize learning. (Grounds & Kudenko, 2008) proposed a
parallel version of the Sarsa algorithm that uses multiple
separate actor-learners to accelerate training. Each actor-
learner learns separately and periodically sends updates to
weights that have changed signiﬁcantly to the other learn-
ers using peer-to-peer communication.
(Tsitsiklis, 1994) studied convergence properties of Q-
learning in the asynchronous optimization setting. These
results show that Q-learning is still guaranteed to converge
when some of the information is outdated as long as out-
dated information is always eventually discarded and sev-
eral other technical assumptions are satisﬁed. Even earlier,
(Bertsekas, 1982) studied the related problem of distributed
dynamic programming.
Another related area of work is in evolutionary meth-
ods, which are often straightforward to parallelize by dis-
tributing ﬁtness evaluations over multiple machines or
threads (Tomassini, 1999). Such parallel evolutionary ap-

proaches have recently been applied to some visual rein-
forcement learning tasks. In one example, (Koutník et al.,
2014) evolved convolutional neural network controllers for
the TORCS driving simulator by performing ﬁtness evalu-
ations on 8 CPU cores in parallel.

Rt = (cid:80)∞

3. Reinforcement Learning Background
We consider the standard reinforcement learning setting
where an agent interacts with an environment E over a
number of discrete time steps. At each time step t, the
agent receives a state st and selects an action at from some
set of possible actions A according to its policy π, where
π is a mapping from states st to actions at. In return, the
agent receives the next state st+1 and receives a scalar re-
ward rt. The process continues until the agent reaches a
terminal state after which the process restarts. The return
k=0 γkrt+k is the total accumulated return from
time step t with discount factor γ ∈ (0, 1]. The goal of the
agent is to maximize the expected return from each state st.
The action value Qπ(s, a) = E [Rt|st = s, a] is the ex-
pected return for selecting action a in state s and follow-
ing policy π. The optimal value function Q∗(s, a) =
maxπ Qπ(s, a) gives the maximum action value for state
s and action a achievable by any policy. Similarly, the
value of state s under policy π is deﬁned as V π(s) =
E [Rt|st = s] and is simply the expected return for follow-
ing policy π from state s.
In value-based model-free reinforcement learning methods,
the action value function is represented using a function ap-
proximator, such as a neural network. Let Q(s, a; θ) be an
approximate action-value function with parameters θ. The
updates to θ can be derived from a variety of reinforcement
learning algorithms. One example of such an algorithm is
Q-learning, which aims to directly approximate the optimal
action value function: Q∗(s, a) ≈ Q(s, a; θ). In one-step
Q-learning, the parameters θ of the action value function
Q(s, a; θ) are learned by iteratively minimizing a sequence
(cid:17)2
of loss functions, where the ith loss function deﬁned as
a(cid:48) Q(s(cid:48), a(cid:48); θi−1) − Q(s, a; θi)

Li(θi) = E(cid:16)

r + γ max

where s(cid:48) is the state encountered after state s.
We refer to the above method as one-step Q-learning be-
cause it updates the action value Q(s, a) toward the one-
step return r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θ). One drawback of us-
ing one-step methods is that obtaining a reward r only di-
rectly affects the value of the state action pair s, a that led
to the reward. The values of other state action pairs are
affected only indirectly through the updated value Q(s, a).
This can make the learning process slow since many up-
dates are required the propagate a reward to the relevant
preceding states and actions.

Asynchronous Methods for Deep Reinforcement Learning

One way of propagating rewards faster is by using n-
step returns (Watkins, 1989; Peng & Williams, 1996).
In n-step Q-learning, Q(s, a) is updated toward the n-
step return deﬁned as rt + γrt+1 + ··· + γn−1rt+n−1 +
maxa γnQ(st+n, a). This results in a single reward r di-
rectly affecting the values of n preceding state action pairs.
This makes the process of propagating rewards to relevant
state-action pairs potentially much more efﬁcient.
In contrast to value-based methods, policy-based model-
free methods directly parameterize the policy π(a|s; θ) and
update the parameters θ by performing, typically approx-
imate, gradient ascent on E[Rt]. One example of such
a method is the REINFORCE family of algorithms due
to Williams (1992). Standard REINFORCE updates the
policy parameters θ in the direction ∇θ log π(at|st; θ)Rt,
which is an unbiased estimate of ∇θE[Rt]. It is possible to
reduce the variance of this estimate while keeping it unbi-
ased by subtracting a learned function of the state bt(st),
known as a baseline (Williams, 1992), from the return. The
resulting gradient is ∇θ log π(at|st; θ) (Rt − bt(st)).
A learned estimate of the value function is commonly used
as the baseline bt(st) ≈ V π(st) leading to a much lower
variance estimate of the policy gradient. When an approx-
imate value function is used as the baseline, the quantity
Rt − bt used to scale the policy gradient can be seen as
an estimate of the advantage of action at in state st, or
A(at, st) = Q(at, st)−V (st), because Rt is an estimate of
Qπ(at, st) and bt is an estimate of V π(st). This approach
can be viewed as an actor-critic architecture where the pol-
icy π is the actor and the baseline bt is the critic (Sutton &
Barto, 1998; Degris et al., 2012).

4. Asynchronous RL Framework
We now present multi-threaded asynchronous variants of
one-step Sarsa, one-step Q-learning, n-step Q-learning, and
advantage actor-critic. The aim in designing these methods
was to ﬁnd RL algorithms that can train deep neural net-
work policies reliably and without large resource require-
ments. While the underlying RL methods are quite dif-
ferent, with actor-critic being an on-policy policy search
method and Q-learning being an off-policy value-based
method, we use two main ideas to make all four algorithms
practical given our design goal.
First, we use asynchronous actor-learners, similarly to the
Gorila framework (Nair et al., 2015), but instead of using
separate machines and a parameter server, we use multi-
ple CPU threads on a single machine. Keeping the learn-
ers on a single machine removes the communication costs
of sending gradients and parameters and enables us to use
Hogwild! (Recht et al., 2011) style updates for training.
Second, we make the observation that multiple actors-

Algorithm 1 Asynchronous one-step Q-learning - pseu-
docode for each actor-learner thread.

// Assume global shared θ, θ−, and counter T = 0.
Initialize thread step counter t ← 0
Initialize target network weights θ− ← θ
Initialize network gradients dθ ← 0
Get initial state s
repeat

(cid:26) r

Take action a with -greedy policy based on Q(s, a; θ)
Receive new state s(cid:48) and reward r
for terminal s(cid:48)
r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θ−)
for non-terminal s(cid:48)
y =
Accumulate gradients wrt θ: dθ ← dθ + ∂(y−Q(s,a;θ))2
s = s(cid:48)
T ← T + 1 and t ← t + 1
if T mod Itarget == 0 then

∂θ

Update the target network θ− ← θ

end if
if t mod IAsyncU pdate == 0 or s is terminal then

Perform asynchronous update of θ using dθ.
Clear gradients dθ ← 0.

end if

until T > Tmax

learners running in parallel are likely to be exploring dif-
ferent parts of the environment. Moreover, one can explic-
itly use different exploration policies in each actor-learner
to maximize this diversity. By running different explo-
ration policies in different threads, the overall changes be-
ing made to the parameters by multiple actor-learners ap-
plying online updates in parallel are likely to be less corre-
lated in time than a single agent applying online updates.
Hence, we do not use a replay memory and rely on parallel
actors employing different exploration policies to perform
the stabilizing role undertaken by experience replay in the
DQN training algorithm.
In addition to stabilizing learning, using multiple parallel
actor-learners has multiple practical beneﬁts. First, we ob-
tain a reduction in training time that is roughly linear in
the number of parallel actor-learners. Second, since we no
longer rely on experience replay for stabilizing learning we
are able to use on-policy reinforcement learning methods
such as Sarsa and actor-critic to train neural networks in a
stable way. We now describe our variants of one-step Q-
learning, one-step Sarsa, n-step Q-learning and advantage
actor-critic.
Asynchronous one-step Q-learning: Pseudocode for our
variant of Q-learning, which we call Asynchronous one-
step Q-learning, is shown in Algorithm 1. Each thread in-
teracts with its own copy of the environment and at each
step computes a gradient of the Q-learning loss. We use
a shared and slowly changing target network in comput-
ing the Q-learning loss, as was proposed in the DQN train-
ing method. We also accumulate gradients over multiple
timesteps before they are applied, which is similar to us-

Asynchronous Methods for Deep Reinforcement Learning

ing minibatches. This reduces the chances of multiple ac-
tor learners overwriting each other’s updates. Accumulat-
ing updates over several steps also provides some ability to
trade off computational efﬁciency for data efﬁciency.
Finally, we found that giving each thread a different explo-
ration policy helps improve robustness. Adding diversity
to exploration in this manner also generally improves per-
formance through better exploration. While there are many
possible ways of making the exploration policies differ we
experiment with using -greedy exploration with  periodi-
cally sampled from some distribution by each thread.
Asynchronous one-step Sarsa: The asynchronous one-
step Sarsa algorithm is the same as asynchronous one-step
Q-learning as given in Algorithm 1 except that it uses a dif-
ferent target value for Q(s, a). The target value used by
one-step Sarsa is r + γQ(s(cid:48), a(cid:48); θ−) where a(cid:48) is the action
taken in state s(cid:48) (Rummery & Niranjan, 1994; Sutton &
Barto, 1998). We again use a target network and updates
accumulated over multiple timesteps to stabilize learning.
Asynchronous n-step Q-learning: Pseudocode for our
variant of multi-step Q-learning is shown in Supplementary
Algorithm S1. The algorithm is somewhat unusual because
it operates in the forward view by explicitly computing n-
step returns, as opposed to the more common backward
view used by techniques like eligibility traces (Sutton &
Barto, 1998). We found that using the forward view is eas-
ier when training neural networks with momentum-based
methods and backpropagation through time.
In order to
compute a single update, the algorithm ﬁrst selects actions
using its exploration policy for up to tmax steps or until a
terminal state is reached. This process results in the agent
receiving up to tmax rewards from the environment since
its last update. The algorithm then computes gradients for
n-step Q-learning updates for each of the state-action pairs
encountered since the last update. Each n-step update uses
the longest possible n-step return resulting in a one-step
update for the last state, a two-step update for the second
last state, and so on for a total of up to tmax updates. The
accumulated updates are applied in a single gradient step.
Asynchronous advantage actor-critic: The algorithm,
which we call asynchronous advantage actor-critic (A3C),
maintains a policy π(at|st; θ) and an estimate of the value
function V (st; θv). Like our variant of n-step Q-learning,
our variant of actor-critic also operates in the forward view
and uses the same mix of n-step returns to update both the
policy and the value-function. The policy and the value
function are updated after every tmax actions or when a
terminal state is reached. The update performed by the al-
gorithm can be seen as ∇θ(cid:48) log π(at|st; θ(cid:48))A(st, at; θ, θv)
where A(st, at; θ, θv) is an estimate of the advantage func-
i=0 γirt+i + γkV (st+k; θv) − V (st; θv),
where k can vary from state to state and is upper-bounded

tion given by(cid:80)k−1

by tmax. The pseudocode for the algorithm is presented in
Supplementary Algorithm S2.
As with the value-based methods we rely on parallel actor-
learners and accumulated updates for improving training
stability. Note that while the parameters θ of the policy
and θv of the value function are shown as being separate
for generality, we always share some of the parameters in
practice. We typically use a convolutional neural network
that has one softmax output for the policy π(at|st; θ) and
one linear output for the value function V (st; θv), with all
non-output layers shared.
We also found that adding the entropy of the policy π to the
objective function improved exploration by discouraging
premature convergence to suboptimal deterministic poli-
cies. This technique was originally proposed by (Williams
& Peng, 1991), who found that it was particularly help-
ful on tasks requiring hierarchical behavior. The gradi-
ent of the full objective function including the entropy
regularization term with respect to the policy parame-
ters takes the form ∇θ(cid:48) log π(at|st; θ(cid:48))(Rt − V (st; θv)) +
β∇θ(cid:48)H(π(st; θ(cid:48))), where H is the entropy. The hyperpa-
rameter β controls the strength of the entropy regulariza-
tion term.
Optimization: We investigated three different optimiza-
tion algorithms in our asynchronous framework – SGD
with momentum, RMSProp (Tieleman & Hinton, 2012)
without shared statistics, and RMSProp with shared statis-
tics. We used the standard non-centered RMSProp update
given by

g = αg + (1 − α)∆θ2 and θ ← θ − η

∆θ√
g + 

,

(1)

where all operations are performed elementwise. A com-
parison on a subset of Atari 2600 games showed that a vari-
ant of RMSProp where statistics g are shared across threads
is considerably more robust than the other two methods.
Full details of the methods and comparisons are included
in Supplementary Section 1.

5. Experiments
We use four different platforms for assessing the properties
of the proposed framework. We perform most of our exper-
iments using the Arcade Learning Environment (Bellemare
et al., 2012), which provides a simulator for Atari 2600
games. This is one of the most commonly used benchmark
environments for RL algorithms. We use the Atari domain
to compare against state of the art results (Van Hasselt et al.,
2015; Wang et al., 2015; Schaul et al., 2015; Nair et al.,
2015; Mnih et al., 2015), as well as to carry out a detailed
stability and scalability analysis of the proposed methods.
We performed further comparisons using the TORCS 3D
car racing simulator (Wymann et al., 2013). We also use

Asynchronous Methods for Deep Reinforcement Learning

Figure 1. Learning speed comparison for DQN and the new asynchronous algorithms on ﬁve Atari 2600 games. DQN was trained on
a single Nvidia K40 GPU while the asynchronous methods were trained using 16 CPU cores. The plots are averaged over 5 runs. In
the case of DQN the runs were for different seeds with ﬁxed hyperparameters. For asynchronous methods we average over the best 5
models from 50 experiments with learning rates sampled from LogU nif orm(10−4, 10−2) and all other hyperparameters ﬁxed.

two additional domains to evaluate only the A3C algorithm
– Mujoco and Labyrinth. MuJoCo (Todorov, 2015) is a
physics simulator for evaluating agents on continuous mo-
tor control tasks with contact dynamics. Labyrinth is a new
3D environment where the agent must learn to ﬁnd rewards
in randomly generated mazes from a visual input. The pre-
cise details of our experimental setup can be found in Sup-
plementary Section 2.

Method
DQN
Gorila
D-DQN
Dueling D-DQN
Prioritized DQN
A3C, FF
A3C, FF
A3C, LSTM

Training Time
8 days on GPU

4 days, 100 machines

8 days on GPU
8 days on GPU
8 days on GPU
1 day on CPU
4 days on CPU
4 days on CPU

Mean Median
121.9% 47.5%
215.2% 71.3%
332.9% 110.9%
343.8% 117.1%
463.6% 127.6%
344.1% 68.2%
496.8% 116.6%
623.0% 112.6%

5.1. Atari 2600 Games

We ﬁrst present results on a subset of Atari 2600 games to
demonstrate the training speed of the new methods. Fig-
ure 1 compares the learning speed of the DQN algorithm
trained on an Nvidia K40 GPU with the asynchronous
methods trained using 16 CPU cores on ﬁve Atari 2600
games. The results show that all four asynchronous meth-
ods we presented can successfully train neural network
controllers on the Atari domain. The asynchronous meth-
ods tend to learn faster than DQN, with signiﬁcantly faster
learning on some games, while training on only 16 CPU
cores. Additionally, the results suggest that n-step methods
learn faster than one-step methods on some games. Over-
all, the policy-based advantage actor-critic method signiﬁ-
cantly outperforms all three value-based methods.
We then evaluated asynchronous advantage actor-critic on
57 Atari games. In order to compare with the state of the
art in Atari game playing, we largely followed the train-
ing and evaluation protocol of (Van Hasselt et al., 2015).
Speciﬁcally, we tuned hyperparameters (learning rate and
amount of gradient norm clipping) using a search on six
Atari games (Beamrider, Breakout, Pong, Q*bert, Seaquest
and Space Invaders) and then ﬁxed all hyperparameters for
all 57 games. We trained both a feedforward agent with the
same architecture as (Mnih et al., 2015; Nair et al., 2015;
Van Hasselt et al., 2015) as well as a recurrent agent with an
additional 256 LSTM cells after the ﬁnal hidden layer. We
additionally used the ﬁnal network weights for evaluation
to make the results more comparable to the original results

Table 1. Mean and median human-normalized scores on 57 Atari
games using the human starts evaluation metric. Supplementary
Table SS1 shows the raw scores for all games.

from (Bellemare et al., 2012). We trained our agents for
four days using 16 CPU cores, while the other agents were
trained for 8 to 10 days on Nvidia K40 GPUs. Table 1
shows the average and median human-normalized scores
obtained by our agents trained by asynchronous advantage
actor-critic (A3C) as well as the current state-of-the art.
Supplementary Table S1 shows the scores on all games.
A3C signiﬁcantly improves on state-of-the-art the average
score over 57 games in half the training time of the other
methods while using only 16 CPU cores and no GPU. Fur-
thermore, after just one day of training, A3C matches the
average human normalized score of Dueling Double DQN
and almost reaches the median human normalized score of
Gorila. We note that many of the improvements that are
presented in Double DQN (Van Hasselt et al., 2015) and
Dueling Double DQN (Wang et al., 2015) can be incorpo-
rated to 1-step Q and n-step Q methods presented in this
work with similar potential improvements.

5.2. TORCS Car Racing Simulator

We also compared the four asynchronous methods on
the TORCS 3D car racing game (Wymann et al., 2013).
TORCS not only has more realistic graphics than Atari
2600 games, but also requires the agent to learn the dy-
namics of the car it is controlling. At each step, an agent
received only a visual input in the form of an RGB image

Asynchronous Methods for Deep Reinforcement Learning

of the current frame as well as a reward proportional to the
agent’s velocity along the center of the track at the agent’s
current position. We used the same neural network archi-
tecture as the one used in the Atari experiments speciﬁed in
Supplementary Section 2. We performed experiments us-
ing four different settings – the agent controlling a slow car
with and without opponent bots, and the agent controlling a
fast car with and without opponent bots. Full results can be
found in Supplementary Figure S2. A3C was the best per-
forming agent, reaching between roughly 75% and 90% of
the score obtained by a human tester on all four game con-
ﬁgurations in about 12 hours of training. A video showing
the learned driving behavior of the A3C agent can be found
at https://youtu.be/0xo1Ldx3L5Q.

5.3. Continuous Action Control Using the MuJoCo

Physics Simulator

We also examined a set of tasks where the action space
is continuous.
In particular, we looked at a set of rigid
body physics domains with contact dynamics where the
tasks include many examples of manipulation and loco-
motion. These tasks were simulated using the Mujoco
physics engine. We evaluated only the asynchronous ad-
vantage actor-critic algorithm since, unlike the value-based
methods, it is easily extended to continuous actions. In all
problems, using either the physical state or pixels as in-
put, Asynchronous Advantage-Critic found good solutions
in less than 24 hours of training and typically in under a few
hours. Some successful policies learned by our agent can
be seen in the following video https://youtu.be/
Ajjc08-iPx8. Further details about this experiment can
be found in Supplementary Section 3.

5.4. Labyrinth

We performed an additional set of experiments with A3C
on a new 3D environment called Labyrinth. The speciﬁc
task we considered involved the agent learning to ﬁnd re-
wards in randomly generated mazes. At the beginning of
each episode the agent was placed in a new randomly gen-
erated maze consisting of rooms and corridors. Each maze
contained two types of objects that the agent was rewarded
for ﬁnding – apples and portals. Picking up an apple led to
a reward of 1. Entering a portal led to a reward of 10 after
which the agent was respawned in a new random location in
the maze and all previously collected apples were regener-
ated. An episode terminated after 60 seconds after which a
new episode would begin. The aim of the agent is to collect
as many points as possible in the time limit and the optimal
strategy involves ﬁrst ﬁnding the portal and then repeatedly
going back to it after each respawn. This task is much more
challenging than the TORCS driving domain because the
agent is faced with a new maze in each episode and must
learn a general strategy for exploring random mazes.

1
Method
1-step Q
1.0
1-step SARSA 1.0
1.0
n-step Q
A3C
1.0

Number of threads
2
3.0
2.8
2.7
2.1

8
13.3
13.1
10.7
6.9

4
6.3
5.9
5.9
3.7

16
24.1
22.1
17.2
12.5

Table 2. The average training speedup for each method and num-
ber of threads averaged over seven Atari games. To compute the
training speed-up on a single game we measured the time to re-
quired reach a ﬁxed reference score using each method and num-
ber of threads. The speedup from using n threads on a game was
deﬁned as the time required to reach a ﬁxed reference score using
one thread divided the time required to reach the reference score
using n threads. The table shows the speedups averaged over
seven Atari games (Beamrider, Breakout, Enduro, Pong, Q*bert,
Seaquest, and Space Invaders).

We trained an A3C LSTM agent on this task using only
84 × 84 RGB images as input. The ﬁnal average score
of around 50 indicates that the agent learned a reason-
able strategy for exploring random 3D maxes using only
a visual input. A video showing one of the agents ex-
ploring previously unseen mazes is included at https:
//youtu.be/nMR5mjCFZCw.

5.5. Scalability and Data Efﬁciency

We analyzed the effectiveness of our proposed framework
by looking at how the training time and data efﬁciency
changes with the number of parallel actor-learners. When
using multiple workers in parallel and updating a shared
model, one would expect that in an ideal case, for a given
task and algorithm, the number of training steps to achieve
a certain score would remain the same with varying num-
bers of workers. Therefore, the advantage would be solely
due to the ability of the system to consume more data in
the same amount of wall clock time and possibly improved
exploration. Table 2 shows the training speed-up achieved
by using increasing numbers of parallel actor-learners av-
eraged over seven Atari games. These results show that all
four methods achieve substantial speedups from using mul-
tiple worker threads, with 16 threads leading to at least an
order of magnitude speedup. This conﬁrms that our pro-
posed framework scales well with the number of parallel
workers, making efﬁcient use of resources.
Somewhat surprisingly, asynchronous one-step Q-learning
and Sarsa algorithms exhibit superlinear speedups that
cannot be explained by purely computational gains. We
observe that one-step methods (one-step Q and one-step
Sarsa) often require less data to achieve a particular score
when using more parallel actor-learners. We believe this
is due to positive effect of multiple threads to reduce the
bias in one-step methods. These effects are shown more
clearly in Figure 3, which shows plots of the average score
against the total number of training frames for different

Asynchronous Methods for Deep Reinforcement Learning

Figure 2. Scatter plots of scores obtained by asynchronous advantage actor-critic on ﬁve games (Beamrider, Breakout, Pong, Q*bert,
Space Invaders) for 50 different learning rates and random initializations. On each game, there is a wide range of learning rates for
which all random initializations acheive good scores. This shows that A3C is quite robust to learning rates and initial random weights.

numbers of actor-learners and training methods on ﬁve
Atari games, and Figure 4, which shows plots of the av-
erage score against wall-clock time.

5.6. Robustness and Stability

Finally, we analyzed the stability and robustness of the
four proposed asynchronous algorithms. For each of the
four algorithms we trained models on ﬁve games (Break-
out, Beamrider, Pong, Q*bert, Space Invaders) using 50
different learning rates and random initializations. Figure 2
shows scatter plots of the resulting scores for A3C, while
Supplementary Figure S7 shows plots for the other three
methods. There is usually a range of learning rates for each
method and game combination that leads to good scores,
indicating that all methods are quite robust to the choice of
learning rate and random initialization. The fact that there
are virtually no points with scores of 0 in regions with good
learning rates indicates that the methods are stable and do
not collapse or diverge once they are learning.

6. Conclusions and Discussion
We have presented asynchronous versions of four standard
reinforcement learning algorithms and showed that they
are able to train neural network controllers on a variety
of domains in a stable manner. Our results show that in
our proposed framework stable training of neural networks
through reinforcement learning is possible with both value-
based and policy-based methods, off-policy as well as on-
policy methods, and in discrete as well as continuous do-
mains. When trained on the Atari domain using 16 CPU
cores, the proposed asynchronous algorithms train faster
than DQN trained on an Nvidia K40 GPU, with A3C sur-
passing the current state-of-the-art in half the training time.
One of our main ﬁndings is that using parallel actor-
learners to update a shared model had a stabilizing effect on
the learning process of the three value-based methods we
considered. While this shows that stable online Q-learning
is possible without experience replay, which was used for
this purpose in DQN, it does not mean that experience re-
play is not useful.
Incorporating experience replay into
the asynchronous reinforcement learning framework could

substantially improve the data efﬁciency of these methods
by reusing old data. This could in turn lead to much faster
training times in domains like TORCS where interacting
with the environment is more expensive than updating the
model for the architecture we used.
Combining other existing reinforcement learning meth-
ods or recent advances in deep reinforcement learning
with our asynchronous framework presents many possibil-
ities for immediate improvements to the methods we pre-
sented. While our n-step methods operate in the forward
view (Sutton & Barto, 1998) by using corrected n-step re-
turns directly as targets, it has been more common to use
the backward view to implicitly combine different returns
through eligibility traces (Watkins, 1989; Sutton & Barto,
1998; Peng & Williams, 1996). The asynchronous ad-
vantage actor-critic method could be potentially improved
by using other ways of estimating the advantage function,
such as generalized advantage estimation of (Schulman
et al., 2015b). All of the value-based methods we inves-
tigated could beneﬁt from different ways of reducing over-
estimation bias of Q-values (Van Hasselt et al., 2015; Belle-
mare et al., 2016). Yet another, more speculative, direction
is to try and combine the recent work on true online tempo-
ral difference methods (van Seijen et al., 2015) with non-
linear function approximation.
In addition to these algorithmic improvements, a number
of complementary improvements to the neural network ar-
chitecture are possible. The dueling architecture of (Wang
et al., 2015) has been shown to produce more accurate es-
timates of Q-values by including separate streams for the
state value and advantage in the network. The spatial soft-
max proposed by (Levine et al., 2015) could improve both
value-based and policy-based methods by making it easier
for the network to represent feature coordinates.

ACKNOWLEDGMENTS

We thank Thomas Degris, Remi Munos, Marc Lanctot,
Sasha Vezhnevets and Joseph Modayil for many helpful
discussions, suggestions and comments on the paper. We
also thank the DeepMind evaluation team for setting up the
environments used to evaluate the agents in the paper.

Asynchronous Methods for Deep Reinforcement Learning

Figure 3. Data efﬁciency comparison of different numbers of actor-learners for three asynchronous methods on ﬁve Atari games. The
x-axis shows the total number of training epochs where an epoch corresponds to four million frames (across all threads). The y-axis
shows the average score. Each curve shows the average over the three best learning rates. Single step methods show increased data
efﬁciency from more parallel workers. Results for Sarsa are shown in Supplementary Figure S5.

Figure 4. Training speed comparison of different numbers of actor-learners on ﬁve Atari games. The x-axis shows training time in
hours while the y-axis shows the average score. Each curve shows the average over the three best learning rates. All asynchronous
methods show signiﬁcant speedups from using greater numbers of parallel actor-learners. Results for Sarsa are shown in Supplementary
Figure S6.

Asynchronous Methods for Deep Reinforcement Learning

References
Bellemare, Marc G, Naddaf, Yavar, Veness, Joel, and
Bowling, Michael. The arcade learning environment:
An evaluation platform for general agents. Journal of
Artiﬁcial Intelligence Research, 2012.

Bellemare, Marc G., Ostrovski, Georg, Guez, Arthur,
Thomas, Philip S., and Munos, Rémi. Increasing the ac-
tion gap: New operators for reinforcement learning. In
Proceedings of the AAAI Conference on Artiﬁcial Intel-
ligence, 2016.

Bertsekas, Dimitri P. Distributed dynamic programming.
Automatic Control, IEEE Transactions on, 27(3):610–
616, 1982.

Chavez, Kevin, Ong, Hao Yi, and Hong, Augustus. Dis-
tributed deep q-learning. Technical report, Stanford Uni-
versity, June 2015.

Degris, Thomas, Pilarski, Patrick M, and Sutton, Richard S.
Model-free reinforcement learning with continuous ac-
tion in practice. In American Control Conference (ACC),
2012, pp. 2177–2182. IEEE, 2012.

Grounds, Matthew and Kudenko, Daniel. Parallel rein-
forcement learning with linear function approximation.
In Proceedings of the 5th, 6th and 7th European Confer-
ence on Adaptive and Learning Agents and Multi-agent
Systems: Adaptation and Multi-agent Learning, pp. 60–
74. Springer-Verlag, 2008.

Koutník, Jan, Schmidhuber, Jürgen, and Gomez, Faustino.
Evolving deep unsupervised convolutional networks for
vision-based reinforcement learning. In Proceedings of
the 2014 conference on Genetic and evolutionary com-
putation, pp. 541–548. ACM, 2014.

Levine, Sergey, Finn, Chelsea, Darrell, Trevor, and Abbeel,
Pieter. End-to-end training of deep visuomotor policies.
arXiv preprint arXiv:1504.00702, 2015.

Li, Yuxi and Schuurmans, Dale. Mapreduce for parallel re-
inforcement learning. In Recent Advances in Reinforce-
ment Learning - 9th European Workshop, EWRL 2011,
Athens, Greece, September 9-11, 2011, Revised Selected
Papers, pp. 309–320, 2011.

Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David,
Graves, Alex, Antonoglou, Ioannis, Wierstra, Daan, and
Riedmiller, Martin. Playing atari with deep reinforce-
ment learning. In NIPS Deep Learning Workshop. 2013.

Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David,
Rusu, Andrei A., Veness, Joel, Bellemare, Marc G.,
Graves, Alex, Riedmiller, Martin, Fidjeland, Andreas K.,
Ostrovski, Georg, Petersen, Stig, Beattie, Charles, Sadik,

Amir, Antonoglou, Ioannis, King, Helen, Kumaran,
Dharshan, Wierstra, Daan, Legg, Shane, and Hassabis,
Demis. Human-level control through deep reinforcement
learning. Nature, 518(7540):529–533, 02 2015. URL
http://dx.doi.org/10.1038/nature14236.

Nair, Arun, Srinivasan, Praveen, Blackwell, Sam, Alci-
cek, Cagdas, Fearon, Rory, Maria, Alessandro De, Pan-
neershelvam, Vedavyas, Suleyman, Mustafa, Beattie,
Charles, Petersen, Stig, Legg, Shane, Mnih, Volodymyr,
Kavukcuoglu, Koray, and Silver, David. Massively par-
allel methods for deep reinforcement learning. In ICML
Deep Learning Workshop. 2015.

Peng, Jing and Williams, Ronald J. Incremental multi-step
q-learning. Machine Learning, 22(1-3):283–290, 1996.

Recht, Benjamin, Re, Christopher, Wright, Stephen, and
Niu, Feng. Hogwild: A lock-free approach to paralleliz-
ing stochastic gradient descent. In Advances in Neural
Information Processing Systems, pp. 693–701, 2011.

Riedmiller, Martin. Neural ﬁtted q iteration–ﬁrst experi-
ences with a data efﬁcient neural reinforcement learning
method. In Machine Learning: ECML 2005, pp. 317–
328. Springer Berlin Heidelberg, 2005.

Rummery, Gavin A and Niranjan, Mahesan. On-line q-

learning using connectionist systems. 1994.

Schaul, Tom, Quan, John, Antonoglou, Ioannis, and Sil-
ver, David. Prioritized experience replay. arXiv preprint
arXiv:1511.05952, 2015.

Schulman, John, Levine, Sergey, Moritz, Philipp, Jordan,
Michael I, and Abbeel, Pieter. Trust region policy op-
In International Conference on Machine
timization.
Learning (ICML), 2015a.

Schulman, John, Moritz, Philipp, Levine, Sergey, Jordan,
Michael, and Abbeel, Pieter. High-dimensional con-
tinuous control using generalized advantage estimation.
arXiv preprint arXiv:1506.02438, 2015b.

Sutton, R. and Barto, A. Reinforcement Learning: an In-

troduction. MIT Press, 1998.

Tieleman, Tijmen and Hinton, Geoffrey. Lecture 6.5-
rmsprop: Divide the gradient by a running average of
its recent magnitude. COURSERA: Neural Networks for
Machine Learning, 4, 2012.

Todorov, E. MuJoCo: Modeling, Simulation and Visual-
ization of Multi-Joint Dynamics with Contact (ed 1.0).
Roboti Publishing, 2015.

Tomassini, Marco. Parallel and distributed evolutionary al-

gorithms: A review. Technical report, 1999.

Asynchronous Methods for Deep Reinforcement Learning

Tsitsiklis, John N. Asynchronous stochastic approxima-
tion and q-learning. Machine Learning, 16(3):185–202,
1994.

Van Hasselt, Hado, Guez, Arthur, and Silver, David. Deep
reinforcement learning with double q-learning. arXiv
preprint arXiv:1509.06461, 2015.

van Seijen, H., Rupam Mahmood, A., Pilarski, P. M.,
Machado, M. C., and Sutton, R. S.
True Online
Temporal-Difference Learning. ArXiv e-prints, Decem-
ber 2015.

Wang, Z., de Freitas, N., and Lanctot, M. Dueling Network
Architectures for Deep Reinforcement Learning. ArXiv
e-prints, November 2015.

Watkins, Christopher John Cornish Hellaby. Learning from
delayed rewards. PhD thesis, University of Cambridge
England, 1989.

Williams, R.J. Simple statistical gradient-following algo-
rithms for connectionist reinforcement learning. Ma-
chine Learning, 8(3):229–256, 1992.

Williams, Ronald J and Peng, Jing. Function optimization
using connectionist reinforcement learning algorithms.
Connection Science, 3(3):241–268, 1991.

Wymann, B., EspiÃl’, E., Guionneau, C., Dimitrakakis, C.,
Coulom, R., and Sumner, A. Torcs: The open racing car
simulator, v1.3.5, 2013.

